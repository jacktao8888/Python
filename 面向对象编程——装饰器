##不带参数的decorator
例：
  import time
  def performance(f):
    def fn(*args,**kw):
      t1=time.time()
      r=f(*args,**kw)
      t2=time.time()
      print 'call '+f.__name__+'() in %s'%(t2-t1)
      return r
    return fn
  
  @performance
  def factorial(n):
      return reduce(lambda x,y: x*y, range(1, n+1))
  
  print factorial(10)

##带参数的decorator
  例：
    def log(prefix):
      def log_decorator(f):
        def wrapper(*args, **kw):
          print '[%s] %s()...' % (prefix, f.__name__)
          return f(*args, **kw)
        return wrapper
      return log_decorator
  
    @log('DEBUG')
    def test():
      pass
    print test()
    
    
    
    
