##不带参数的decorator
例：
  import time
  def performance(f):
    def fn(*args,**kw):
      t1=time.time()
      r=f(*args,**kw)
      t2=time.time()
      print 'call '+f.__name__+'() in %s'%(t2-t1)
      return r
    return fn
  
  @performance
  def factorial(n):
      return reduce(lambda x,y: x*y, range(1, n+1))
  
  print factorial(10)

##带参数的decorator
  例：
    def log(prefix):
      def log_decorator(f):
        def wrapper(*args, **kw):
          print '[%s] %s()...' % (prefix, f.__name__)
          return f(*args, **kw)
        return wrapper
      return log_decorator
  
    @log('DEBUG')
    def test():
      pass
    print test()
    
##完善decorator
  例：
    有decorator的情况下，再打印函数名：
    def log(f):
      def wrapper(*args, **kw):
        print 'call...'
        return f(*args, **kw)
      return wrapper
    @log
    def f2(x):
      pass
    print f2.__name__
    输出： wrapper
   
  如果要让调用者看不出一个函数经过了@decorator的“改造”，就需要把原函数的一些属性复制到新函数中，
  Python内置的functools可以用来自动化完成这个“复制”的任务： 
  例： 
    import functools
    def log(f):
      @functools.wraps(f)   //复制原函数的属性到新函数上，这里很难包括新、旧函数的参数信息！
      def wrapper(*args, **kw):
        print 'call...'
        return f(*args, **kw)
      return wrapper
    
    
