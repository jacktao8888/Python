初始化实例属性：
    现实世界中，一种类型的实例应该拥有相同名字的属性。例如，Person类应该在创建的时候就拥有 name、gender 和 birth 属性，怎么办？
例：
  class Person(object):
    def __init__(self,name,gender,birth,**kw):
      self.name=name
      self.gender=gender
      self.birth=birth
      for k,v in kw.iteritems():
        setattr(self,k,v)
  
  xiaoming=Person('XiaoMing','Male','1991-1-1',job='student')
  print xiaoming.job

##访问限制：
    只有以双下划线开头的"__job"不能直接被外部访问。
    "_xx"
    "__xx__"，它可以被外部访问
 
##类属性和实例属性：
    当实例属性和类属性重名时，实例属性优先级高
    千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。
    
    例：
        class Person(object):
        address = 'Earth'
        def __init__(self, name):
            self.name = name

        p1 = Person('Bob')
        p2 = Person('Alice')
        
        p1.address = 'China'
        print p1.address        =>China
        print p2.address        =>Earth
        print Person.address    =>Earth

##类方法和实例方法（方法即定义的函数）：
    在class中定义的全部是实例方法
    通过标记一个 @classmethod，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 cls
    因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用。
    例：
        class Person(object):
        count = 0
        @classmethod
        def how_many(cls):
            return cls.count
        def __init__(self, name):
            self.name = name
            Person.count = Person.count + 1
    
        print Person.how_many()
        p1 = Person('Bob')
        print Person.how_many()
        
        
        
    
    
    
    
