#高阶函数：
    1、变量可以指向函数
    	abs(-10) => 10
    	f=abs
    	f(-10) => 10
    2、函数的参数可以接收变量
    3、一个函数可以接受另一个函数作为参数
        import math
        def addsqrt(x,y,f):
            return f(x)+f(y)
        
        addsqrt(25,9,math.sqrt) => 8
    4、能接收函数做参数的函数就是高阶函数
练习：
##map()函数
    def format_name(s):
        return str.capitalize(s)    
        //return s[0].upper() + s[1:].lower()

    print map(format_name, ['adam', 'LISA', 'barT'])

##reduce()函数
    def f(x, y):
        return x + y
    
    print reduce(f,[1,2,3,5,8],100) => (100+1)+2+3+5+8

##filter()函数
    filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，
filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
    
    def is_odd(x):
    return x % 2 == 1
    然后，利用filter()过滤掉偶数：

    filter(is_odd, [1, 4, 6, 7, 9, 12, 17])
    结果：[1, 7, 9, 17]

*注意: s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。
    当rm为空时，默认删除空白符（包括'\n', '\r', '\t', ' ')，如下：
    a = '     123'
    a.strip()
    结果： '123'

    a='\t\t123\r\n'
    a.strip()
    结果：'123'
    
##sorted()排序函数
-    sorted([20,10,30,5,90,70])  //默认从小到大排序
-    sorted([20,10,30,5,90,70],reversed_cmp)     //自定义从大到小排序
    def reversed_cmp(x,y):
        if x>y
            return -1
        if x<y
            return 1
        if x=y
            return 0

-    def cmp_ignore(s1,s2):
         return cmp(s1.lower(),s2.lower())
    
     sorted(['Linda','jeccy','Lucy','david'])

##闭包函数
    外层函数返回内层函数，内层函数引用外层函数的变量（包括参数）
    注意：内层函数不能引用外层的循环变量！
 例：
    def count():
    fs = []
    for i in range(1, 4):
        def f(s=i):
            return s*s
        fs.append(f)
    return fs

    f1, f2, f3 = count()
    print f1(), f2(), f3()
    

