import re

str1 = 'hello world'
pa = re.compile(r'hello')
ma = pa.mathch(str1)
ma.group()  =>'hello'
ma.string   =>'hello world'

ma = re.match(r'hello', str1)
ma.group()  =>'hello'

re.search(r'ab{3}c', 'abbbc')   =>span=(0,5),match='abbbc'
re.search(r'ab{3}c', 'abbbbbc') =>没有匹配
re.search(r'ab{3,10}', 'abbbbc')  =>span=(0,6),match='abbbbc' 可以匹配b的个数为3-10次

re.search(r'[01]\d\d|2[0-4]\d|25[0-5]', '192')  =>匹配0-255
#注意*_*:下面的'25[0-5]'要放在最前面，否则无法匹配最后一位为'25[0-5]'的情况，会被错误的识别为两位的'25'
re.search(r'((25[0-5]|[01]{0,1}\d{0,1}\d|2[0-4]\d)\.){3}(25[0-5]|[01]{0,1}\d{0,1}\d|2[0-4]\d)', '192.168.1.1')


正则表达式语法:
.           匹配除 "\n" 之外的任何单个字符
[...]       匹配字符集
\d或\D      匹配数字或非数字
\s或\S      匹配空白或非空白字符
\w或\W      匹配单词字符[a-zA-Z0-9]或非单词字符

贪婪方式：
*  <==> {0,}  匹配前面的子表达式零次或多次，且尽可能多的匹配
+  <==> {1,}  匹配前面的子表达式一次或多次，且尽可能多的匹配
？ <==> {0,1} 匹配前面的子表达式零次或一次，且尽可能多的匹配
非贪婪方式：
*?            匹配零次
+?            匹配一次
??            匹配零次

例：
s = '<html><title>I love python</title></html>'
re.search(r"<.+>", s)   ==> match = '<html><title>I love python</title></html>'
re.search(r"<.+?>",s)   ==> match = '<html>'  只查找一次'<.'这种格式的字符，到'<title...'时自动回退


